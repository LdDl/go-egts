package packet

import (
	"encoding/hex"
	"testing"
)

var (
	hexStringsAuth = []string{
		"0100000B0022000100010c170001000196933831010101140096933831023836353930353032343632343131300397",
		"0100000B0022000100010c1700010001539ffc300101011400539ffc3002383631373835303037323332353736ccff",
		"0100000B0022000100010c170001000145e71631010101140045e7163102383633353931303236303238373831da25",
		"0100000B0022000100010c170001000143e71631010101140043e7163102383633353931303233373034393339c266",
		"0100000B0022000100010c1700010001549ffc300101011400549ffc3002383631373835303038333738303036a6d9",
	}
	hexStringsData = []string{
		"0100000b0028000200016f1d00020001808c03000202101a0002b0d00f3aae5e9a1e7db24481cc017c00000000107800000000a7e0",
		"0100000B002800030001291D00030001808c03000202101A008baed00f8c19609a8038a8448100000000000000107800000000c50d",
	}

	bytesAuth = [][]byte{}

	bytesData = [][]byte{
		[]byte{
			1, 0, 0, 11, 0, 40, 0, 17, 81, 1, 18, 29, 0, 17, 81, 1, 150, 147, 56, 49, 2, 2, 16, 26, 0, 154, 136, 129, 16, 16, 209, 106, 154, 124, 34, 200, 68, 129, 0, 0, 42, 0, 0, 0, 0, 16, 133, 0, 0, 0, 0, 49, 198,
		},
		[]byte{
			1, 0, 0, 11, 0, 40, 0, 238, 80, 1, 173, 29, 0, 238, 80, 1, 166, 75, 0, 0, 2, 2, 16, 26, 0, 43, 122, 124, 16, 246, 79, 86, 154, 166, 161, 185, 68, 129, 64, 1, 202, 0, 0, 0, 0, 16, 147, 0, 0, 0, 0, 192, 89,
		},
		[]byte{
			1, 0, 0, 11, 0, 40, 0, 254, 80, 1, 9, 29, 0, 254, 80, 1, 84, 159, 252, 48, 2, 2, 16, 26, 0, 47, 61, 119, 16, 25, 132, 94, 154, 161, 85, 186, 68, 129, 200, 0, 185, 0, 0, 0, 0, 16, 124, 0, 0, 0, 0, 73, 117,
		},
		[]byte{
			1, 0, 0, 11, 0, 15, 175, 1, 0, 1, 9, 30, 0, 1, 0, 149, 140, 15, 3, 0, 161, 98, 127, 15, 2, 2, 16, 21, 0, 161, 98, 127, 15, 35, 96, 175, 154, 40, 185, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 2, 0, 149, 140, 15, 3, 0, 168, 98, 127, 15, 2, 2, 16, 21, 0, 168, 98, 127, 15, 6, 180, 175, 154, 178, 113, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 3, 0, 149, 140, 15, 3, 0, 171, 98, 127, 15, 2, 2, 16, 21, 0, 171, 98, 127, 15, 23, 211, 175, 154, 188, 85, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 4, 0, 149, 140, 15, 3, 0, 173, 98, 127, 15, 2, 2, 16, 21, 0, 173, 98, 127, 15, 160, 226, 175, 154, 78, 73, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 5, 0, 149, 140, 15, 3, 0, 188, 98, 127, 15, 2, 2, 16, 21, 0, 188, 98, 127, 15, 41, 242, 175, 154, 138, 65, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 6, 0, 149, 140, 15, 3, 0, 191, 98, 127, 15, 2, 2, 16, 21, 0, 191, 98, 127, 15, 150, 254, 175, 154, 170, 54, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 7, 0, 149, 140, 15, 3, 0, 194, 98, 127, 15, 2, 2, 16, 21, 0, 194, 98, 127, 15, 59, 17, 176, 154, 33, 39, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 8, 0, 149, 140, 15, 3, 0, 196, 98, 127, 15, 2, 2, 16, 21, 0, 196, 98, 127, 15, 196, 32, 176, 154, 153, 23, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 9, 0, 149, 140, 15, 3, 0, 203, 98, 127, 15, 2, 2, 16, 21, 0, 203, 98, 127, 15, 84, 107, 176, 154, 117, 217, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 10, 0, 149, 140, 15, 3, 0, 208, 98, 127, 15, 2, 2, 16, 21, 0, 208, 98, 127, 15, 147, 172, 176, 154, 137, 161, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 11, 0, 149, 140, 15, 3, 0, 215, 98, 127, 15, 2, 2, 16, 21, 0, 215, 98, 127, 15, 26, 19, 177, 154, 52, 79, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 12, 0, 149, 140, 15, 3, 0, 217, 98, 127, 15, 2, 2, 16, 21, 0, 217, 98, 127, 15, 245, 43, 177, 154, 143, 60, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 13, 0, 149, 140, 15, 3, 0, 220, 98, 127, 15, 2, 2, 16, 21, 0, 220, 98, 127, 15, 34, 78, 177, 154, 39, 34, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 14, 0, 149, 140, 15, 3, 0, 222, 98, 127, 15, 2, 2, 16, 21, 0, 222, 98, 127, 15, 171, 93, 177, 154, 71, 23, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 15, 0, 149, 140, 15, 3, 0, 227, 98, 127, 15, 2, 2, 16, 21, 0, 227, 98, 127, 15, 51, 109, 177, 154, 103, 12, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 16, 0, 149, 140, 15, 3, 0, 233, 98, 127, 15, 2, 2, 16, 21, 0, 233, 98, 127, 15, 161, 121, 177, 154, 108, 254, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 17, 0, 149, 140, 15, 3, 0, 236, 98, 127, 15, 2, 2, 16, 21, 0, 236, 98, 127, 15, 69, 140, 177, 154, 86, 237, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 18, 0, 149, 140, 15, 3, 0, 240, 98, 127, 15, 2, 2, 16, 21, 0, 240, 98, 127, 15, 142, 177, 177, 154, 190, 207, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 19, 0, 149, 140, 15, 3, 0, 246, 98, 127, 15, 2, 2, 16, 21, 0, 246, 98, 127, 15, 149, 236, 177, 154, 204, 165, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 20, 0, 149, 140, 15, 3, 0, 248, 98, 127, 15, 2, 2, 16, 21, 0, 248, 98, 127, 15, 30, 252, 177, 154, 28, 158, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 21, 0, 149, 140, 15, 3, 0, 251, 98, 127, 15, 2, 2, 16, 21, 0, 251, 98, 127, 15, 249, 20, 178, 154, 142, 156, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 22, 0, 149, 140, 15, 3, 0, 253, 98, 127, 15, 2, 2, 16, 21, 0, 253, 98, 127, 15, 185, 42, 178, 154, 252, 168, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 23, 0, 149, 140, 15, 3, 0, 255, 98, 127, 15, 2, 2, 16, 21, 0, 255, 98, 127, 15, 93, 61, 178, 154, 45, 189, 16, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 24, 0, 149, 140, 15, 3, 0, 10, 99, 127, 15, 2, 2, 16, 21, 0, 10, 99, 127, 15, 255, 166, 178, 154, 89, 54, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 25, 0, 149, 140, 15, 3, 0, 26, 99, 127, 15, 2, 2, 16, 21, 0, 26, 99, 127, 15, 170, 75, 179, 154, 108, 245, 17, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 26, 0, 149, 140, 15, 3, 0, 28, 99, 127, 15, 2, 2, 16, 21, 0, 28, 99, 127, 15, 252, 84, 179, 154, 130, 6, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 27, 0, 149, 140, 15, 3, 0, 30, 99, 127, 15, 2, 2, 16, 21, 0, 30, 99, 127, 15, 23, 88, 179, 154, 247, 21, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 28, 0, 149, 140, 15, 3, 0, 32, 99, 127, 15, 2, 2, 16, 21, 0, 32, 99, 127, 15, 197, 78, 179, 154, 242, 35, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 29, 0, 149, 140, 15, 3, 0, 34, 99, 127, 15, 2, 2, 16, 21, 0, 34, 99, 127, 15, 33, 60, 179, 154, 230, 46, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 30, 0, 149, 140, 15, 3, 0, 41, 99, 127, 15, 2, 2, 16, 21, 0, 41, 99, 127, 15, 35, 229, 178, 154, 69, 101, 18, 69, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 16, 2, 0, 30, 0, 31, 0, 149, 140, 15, 3, 0, 65, 99, 127, 15, 2, 2, 16, 21, 0, 65, 99, 127, 15, 96, 143, 177, 154,
		},
	}
	maxBuffer = make([]byte, 0, 65535)
)

func TestReadPacketDataHEX(t *testing.T) {
	var err error

	for i := range hexStringsData {
		maxBuffer, err = hex.DecodeString(hexStringsData[i])
		if err != nil {
			t.Error(
				"Error occurred", err,
			)
		}

		data, responseCode := ReadPacket(maxBuffer)
		if responseCode != 0 {
			t.Error(
				"Response code has to be 0, but it is", responseCode,
			)
		}

		if len(data.ServicesFrameData) != 1 {
			t.Error(
				"Length of data has to be 1, but it is", len(data.ServicesFrameData),
			)
		}

		if data.ServicesFrameData[0].RecordData.SubrecordType != 16 {
			t.Error(
				"Subrecord type has to be 16, but it is", data.ServicesFrameData[0].RecordData.SubrecordType,
			)
		}
	}
}

func TestReadPacketAuthHEX(t *testing.T) {
	var err error

	for i := range hexStringsAuth {
		maxBuffer, err = hex.DecodeString(hexStringsAuth[i])
		if err != nil {
			t.Error(
				"Error occurred", err,
			)
		}

		data, responseCode := ReadPacket(maxBuffer)
		if responseCode != 0 {
			t.Error(
				"Response code has to be 0, but it is", responseCode,
			)
		}

		if len(data.ServicesFrameData) != 1 {
			t.Error(
				"Length of data has to be 1, but it is", len(data.ServicesFrameData),
			)
		}

		if data.ServicesFrameData[0].RecordData.SubrecordType != 1 {
			t.Error(
				"Subrecord type has to be 1, but it is", data.ServicesFrameData[0].RecordData.SubrecordType,
			)
		}
	}
}

func TestReadPacketDataBytes(t *testing.T) {

	for i := range bytesData {

		maxBuffer = bytesData[i]

		data, responseCode := ReadPacket(maxBuffer)
		if responseCode != 0 {
			t.Error(
				"Response code has to be 0, but it is", responseCode,
			)
		}

		if len(data.ServicesFrameData) != 1 {
			t.Error(
				"Length of data has to be 1, but it is", len(data.ServicesFrameData),
			)
		}

		if data.ServicesFrameData[0].RecordData.SubrecordType != 16 {
			t.Error(
				"Subrecord type has to be 16, but it is", data.ServicesFrameData[0].RecordData.SubrecordType,
			)
		}
	}
}

func TestReadPacketAuthBytes(t *testing.T) {

	for i := range bytesAuth {

		maxBuffer = bytesAuth[i]

		data, responseCode := ReadPacket(maxBuffer)
		if responseCode != 0 {
			t.Error(
				"Response code has to be 0, but it is", responseCode,
			)
		}

		if len(data.ServicesFrameData) != 1 {
			t.Error(
				"Length of data has to be 1, but it is", len(data.ServicesFrameData),
			)
		}

		if data.ServicesFrameData[0].RecordData.SubrecordType != 16 {
			t.Error(
				"Subrecord type has to be 16, but it is", data.ServicesFrameData[0].RecordData.SubrecordType,
			)
		}
	}
}
